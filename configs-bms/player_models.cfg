"ModelSystem"
{
	"Models"
	{
		"Example"
		{
			// If set to 0, this model is skipped.
			"enabled" "0"

			// Model path
			// This is the only required parameter.
			"path" "models/example.mdl"

			// Allowed skin types. If not present, all skins are selectable.
			// This is the same number as if calling the input "skin" on player entity.
			"skins" "0;1;3"

			// Allowed body groups. If not present, all body groups are selectable.
			// This is the same number as if calling the input "SetBodyGroup" on player entity.
			"bodygroups" "0;4;25"

			// Model soundpack name, configured under the "Sounds" section.
			"sounds" "Example"

			// At what HP to play the hurt sound. Supports random selection, e.g. "30;90"
			"hurtSoundHP" "45"

			// Delay between jump sounds. Supports random selection, e.g. "1.0;3.0"
			"jumpSoundTime" "0"

			// HUD color to use for the name when browsing the model.
			"hudColor" "10 65 85"

			// Models with highest priority will be selected by default for new players.
			// If Multiple models share the same priority, a random one is picked.
			"defaultPrio" "100"

			// Restricts the model to specific team in teamplay. Supports team name or team index.
			"team" "scientist"

			// Restricts the model to admins with these flags.
			"adminFlags" "c"

			// If 1, the model starts locked and has to be unlocked per player by a command or API.
			"locked" "0"

			// The viewmodel body group(s) to apply.
			//
			// 1) A list of bodypart - submodel pairs, as displayed in HLMV's model tab.
			// Format: "BodyPart1;SubmodelIndex1;BodyPart2;SubmodelIndex2;BodyPartN;SubmodelIndexN"
			//
			// 2) Alternatively a single number representing the concrete body group combination as if calling the
			// input "SetBodyGroup" on the viewmodel entity. This method affects the state of all body parts on the model!
			"vmBody" "arms;3"

			// Downloads are handled automatically! Only specify if you need additional files!
			"downloads"
			{
				"path" "models/example.ext"
				"path" "models/another.ext"
			}
		}

		// ----------------------------------------------------------------------------------------

		"Hev"
		{
			"path" "models\player\bmdm_hev_male.mdl"
			"vmbody" "arms;0"
			"team" "scientist"
			"defaultprio" "100"
		}
		"Hev 2"
		{
			"path" "models\player\mp_scientist_hev.mdl"
			"vmbody" "arms;0"
			"team" "scientist"
		}
		"G-man"
		{
			"path" "models\player\mp_gman.mdl"
			"vmbody" "arms;6"
		}
		"Assassin"
		{
			"path" "models\player\hassassin.mdl"
			"vmbody" "arms;0"
		}
		"Guard"
		{
			"path" "models\player\mp_guard.mdl"
			"vmbody" "arms;3"
		}
		"Marine"
		{
			"path" "models\player\mp_marine.mdl"
			"vmbody" "arms;1"
			"team" "hgrunt"
		}
		"Scientist"
		{
			"path" "models\player\mp_scientist.mdl"
			"vmbody" "arms;2"
		}
		"Female scientist"
		{
			"path" "models\player\mp_scientist_female.mdl"
			"vmbody" "arms;2"
		}
		"Zombie guard"
		{
			"path" "models\player\mp_zombie_guard.mdl"
			"vmbody" "arms;5"
		}
		"Zombie Hev"
		{
			"path" "models\player\mp_zombie_hev.mdl"
			"vmbody" "arms;4"
		}
		"Zombie marine"
		{
			"path" "models\player\mp_zombie_marine.mdl"
			"vmbody" "arms;4"
		}
		"Zombie scientist"
		{
			"path" "models\player\mp_zombie_sci.mdl"
			"vmbody" "arms;4"
		}
	}
	"Sounds"
	{
		"Example"
		{
			// Model viewed in model browser
			"View"
			{
				// "path" "dir/example.wav"
				// "path" "dir/example2.wav"
			}
			// Model selected
			"Select"
			{
			}
			// Player gets hurt
			"Hurt"
			{
			}
			// Player dies
			"Death"
			{
			}
			// Player jumps
			"Jump"
			{
			}
		}
	}
}
